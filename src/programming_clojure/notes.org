#+TITLE: Programming Clojure

* Introduction

Notes from programming clojure book. It will be devided into section
chapter wise. If there is any content that do not fit any chatper, or
random things, it will be put under section called *General*

* General
**  Forms
Forms are unit of code or data that is treated as single enity by the
Clojure compiler. Forms can be expressions, macros, data structures
etc.

Clojure code is made up of nested forms. The compiler evaluates these
forms according to some rules

** Functional programming
- Properties of functional programming:
  - Functions are first class object. i.e, functions can be created at
    runtime, passed around and returned.
  - Data is immutable
  - Functions are pure

** Clojure features
- Lisp code is homoiconoic: i.e, lisp code is lisp data.
- Clojure generalizes Lisp's physical list into an abstraction called
  sequence.
- Clojure protects mutable state via Software Transactional Memory. STM
  is a higher level approach to thread safety.
- You can consdier clojure ref as thread safe, in memory database of its
  own. For eg:
- Clojure codes are packaged into libraries and each libraries belong
  to certain namespace.
- Clojure sets can also be function that tests membersnhips

  #+BEGIN_SRC clojure
    ;; ref function creates transactionally protected reference.
    (def accounts (ref #{}))
    (defrecord Account [id balance])

    ;; Updating the state
    (dosync
     (alter accounts conj (->Account "CLJ" 1000.00)))
    ;; dosync causes the update to accounts to execute inside a
    ;; transaction which makes it thread safe

    ;; refer to the current namespace using
    (ns-name *ns*)

    ;; quoting
    ;; it means not to find the corresponding var and evaluate the value,
    ;; just use it as a data

    ;; refer
    (ns user2)
    (def hello "Hello")
    (ns user)
    (refer 'user2)
    (refer 'user2 :only ['hello])
    hello ;; "hello"
    ;; you don't need to use fully qualified name
    ;; :exclude and :rename are also available
    ;; NOTE: rename takes a map not a vector

    ;; instead of
    (require 'clojure/core)
    ;; we can use
    (clojure.core/refer-clojure)

  #+END_SRC

** Java
Running programs on Java Virtual Machine (JVM) requires assembling a
classpath that contains all of the code required to run your program,
which includes Clojure itself, your code, and any Java or Clojure
dependencies needed by your code.

** Repl
- Special Variables: The result of evaluating three most recent
  expressions are stored in special variables *1, *2 and *3.
- In the repl, if an exception is thrown, the details are often not
  shown due to brevity reason. But if you still want to see the
  Exception, you can use the special variable *e. Or you can just print
  the stack trace using (pst) function

** Code samples
#+BEGIN_SRC clojure
  ;; Create a record
  (defrecord Person [first-name last-name])
  (def foo (->Person "Saurav" "Sp"))
  (:first-name foo)

  ;; Difference between doto and threading macro .. in interops
  (doto "Hello" (.this)(.that))
  ;; this will return the first object
  ;; "Hello" with the all the side effect that has taken place
  ;; on that object.
  (.. "Hello" getClass getOtherclas)
  ;; This will return value of the last function.

  ;; for list to be evaluated as data
  (quote (1 2 3))
  ;; or
  '( 1 2 3)
#+END_SRC

** namespace
If you want to swtich to other namespace use in-ns function
By default java.lang package is automatically available.
To make clojure.core package avaiable
Execute this code
(clojure.core/user 'clojure.core)


* Exploring Clojure
- Clojure's runtime evaluates lists as function calls.
- Symbols are used to name things.
  - It can name funtions like str, concat
  - Operators like + (this is actually a function)
  - Java classes like java.lang.String
  - Namespaces like clojure.core
- Vector is sequential indexed collection.
- Lists are sequential collection stored as linked list.
- Sets are a good choice for fast addition and removal of element
- True is ture, false is false and nil is false.
- Other than false and nil, everything else evaluates to true
- Empty list is not false in clojure
- Zero (0) is not false in clojrue
- (nil? false) -> false
- (false? nil) -> false ;; false? check if the value is exactly false
  or not
** Predicate
A function that returns true or false
** defn
#+BEGIN_SRC clojure
  (defn name doc-string? attr-map? [params*] prepost-map? body)
#+END_SRC
- attr-map? -- associates metadata with function's var
- prepost-map? -- used to define preconditions and postconditions that are
  automatically checked on invocation
** Variable arity
- User ampersand at the end of the name of the variable
- Clojure binds the name after the ampersand to a sequence of all
  remaining params
** Vars, Bindings, and Namespaces
- A namespace is a collection of names(symbols) that refers to vars.
- Each var is bound to value

*** Vars
- When you define an object with *def* or *defn*, that object is
  stored in clojure var

  For example, \\
  #+BEGIN_SRC  clojure
  (def foo 10) ;; -> #'user/foo
  #+END_SRC
  The symbol #'user/foo refers to a var that is bound to a value 10 \\
  Clojure evaluates this symbol by returning the value associated with
  the var it refers to.
- The initial value of var is called *root-binding*. Sometimes it's
  useful to have *thread-local binding* for vars.
- You can use var to return the var bound to user/foo:
    #+BEGIN_SRC  clojure
  (var foo) ;; #'user/foo
  #+END_SRC
- There is a reader macro for the above code
- #'foo - equavlent - (var foor)
- var can have metadata
- var can be dynamically rebound on a per-thread basis

*** Bindings
- Vars a re bound to name. That is also a binding. For example,
  binding in let

*** Difference between var and binding

A binding is a name for a value within the scope of a function or let:
#+BEGIN_SRC clojure
(fn [x] x)
(let [x 1] x)
#+END_SRC
In both examples, x is a (lexical) binding. The binding is immutable,
you can't modify it. So it's just a name bound to a value and you can
refer to this name later on in the same scope.

A var however is a globally defined named mutable location.

#+BEGIN_SRC clojure
  (def x 1)
  (alter-var-root #'x inc) ;; x becomes 2
  (defn foo [] 1) ;; foo is a var bound to a function
  (foo) ;; returns 1
#+END_SRC
In a REPL you constantly re-define vars, e.g. if we want to modify the
function foo, we just evaluate again:

#+BEGIN_SRC clojure
(defn foo [] 2) ;; foo is the same var, but now bound to a new function
(foo) ;; now returns 2
#+END_SRC

A dynamic binding only refers to dynamic vars, which are vars, and can
be mutated using the binding macro. This name might confuse you, since
it has nothing to do with the bindings in fn or let.

[[https://clojure.org/reference/vars][Clojure - Vars and the Global Environment]]

*** Storing object with *def* or *defn*
*(def great-books ["East of Eden" "The Glass Bead Game"])* \\
This is what clojure does when we evaluate the above code. And this
process is called *internting a var*
- Update the current namespaceâ€™s map with the association between
  great-books and the var.
- Find a free storage shelf.
- Store ["East of Eden" "The Glass Bead Game"] on the shelf.
- Write the address of the shelf on the var.
- Return the var (in this case, #'user/great-books).

*** Ineteract with namespace map of interned var
- (ns-interns *ns*) ;; returns all the interned vars in the current
  namespace
- (ns-map *ns*) ;; this returns the full map that the namespace uses
  to lookup for vars


*** Root binding
Root binding refers to the initial global binding of a var when it was
first initialized with *defn* or *def*

** Destructuring
*** Map destructuring
Already familiar
*** Vector desctructuring
#+BEGIN_SRC clojure
    (let [[x y] [ 1 2 3]] [x y]) ;; -> [ 1, 2]

    ;; if you want to skip element at start of a colleciton, here's what
    ;; you could do
    (let [[ _ _ z] [ 1 2 3]]
      z)
    ;; -> 3
    ;; underscore can be used for saying something that goes along the
    ;; line like this
    ;; I don't care about your binding

    ;; also possible to simultaneously bind both collection and element

  (let [[x y :as coordinates] [1 2]]
      coordinates)
  ;; -> [1 2]
#+END_SRC

** Import java classes
#+BEGIN_SRC clojure
  ;; (import '(package Class+))
  (import '(java.io InputStream File))
#+END_SRC

** Adding metadata
#+BEGIN_SRC clojure
  (defn ^{:tag String} should [s] (clojure.string/upper-case s))
  ;; you can also add metadata to function args
  (defn ^{:tag String} should
    [^{:tag String} s] (clojure.string/upper-case s))
  ;; because tag metadata is so common, you can also use the shortform
  ;; ^Classname, which expands to ^{:tag Classname}
  (defn ^String should [^String s] (clojure.string/upper-case s))
#+END_SRC


* Unifying Data with Sequences
All Datastructures in clojure can be accessed through a single
abstraction: the sequence (seq)

- What does the phrase sequence are logical list mean?
  This statement emphasize that sequence provide an conceptial or
  abstract view of list regardless of the underlying data structure.
  You can treat various data structures as if they were a list be it
  list, vector, map or anything.
- Collecton that can be viewed as a seq are *seqable* collection.
  - All clojure collections
  - All java collections
  - Regular expressions
  - Directory Structures
  - I/O streams
  - XML Tress
- seq library - a set of function that can be applied to any collectons
  that are seqable.
- You can replace many loops that we use in imperative language.
- Some functinos that are there in the sequence library
  #+BEGIN_SRC clojure
    (first coll) (rest coll) (last coll) (cons elem coll) ;; add item
    ;;infront
    (seq coll) ;; returns seq of any seqable function ;; returns a
    type of clojure.lang.PersistentArrayMap$Seq

    ;; Example (def my-map {:this :that :set #{:this :hat} :vec [1 2 2]
    :list '(1 2 3)}) (seq my-map) ([:this :that] [:set #{:this :hat}]
    [:vec [1 2 2]] [:list (1 2 3)])

    ;; conj and into -> both of them return the underlying collection type
    ;; instead of sequence type even though these functions are comming
    ;; from sequence library functions (conj coll element & elements) ;;
    ;; adds one or more elements to a collection.  (into to-coll
    ;; from-coll) ;; adds all item of one collection into another

    ;; Some more functions (range start? end? step?)  (repeat n x) ;;
    repeats an element x times (iterate f x) (take n sequence) ;; returns
    a lazy sequence (cycle coll) ;; takes a collection and cycles it
    ;; infinitely
    (interleave & coll) ;; takes multiple collections and
    ;; produces a new colleciton that interleaves a vlaues from each
    ;; collection until one of the collections is exhausetes
    (interpose separator coll) ;; similar to interleave but there will
    ;; be a separator

    ;; some more functions that creates collection. These are also
    ;; from the sequence library
    (list & elements)
    (vec & elements)
    (hash-set & elements)
    (hash-map & elements)
    ;; this is tiny bit different
    (set coll)

    ;; some more functions
    (filter pred coll)
    (take-while pred coll) ;; using filter while taking object from
    ;; lazy sequence
    (drop-while pred coll) ;; opposite of take-while

    ;; in a totally unrelated note
    (complement pred) ;; gives the exact opposite result of pred

    ;; interesting thing
    ;; set can act as a function that takes looks up value in the set
    ;; and return true or nil if not found.

    (split-at ele coll) ;; same as meaning
    (split-with fn coll)

    ;; sequence predicate fun
    (every? pred coll)

    (some pred coll) ;; notice that some does not ends with ?
    ;; because some is not actually a predicate
    ;; some returns the actual value of the first match
    (some identity [nil false 1 nil 2]) ;; returns 1
    ;; a common use of some is to perform a linear search to see if a
    ;; sequence contains a matching element
    (some #{3} (range 20)) ;; returns  3

    (map f coll) ;; map can also take multiple collection. In that
    ;; case f must have multiple arguments.

    (reduce f coll) ;; reduce must take a function of two argument
  #+END_SRC
- It is interesting to note that sequence library functions return a
  seq instead of the actual data structure
- Elements of a set are not in order. If you want order, you can use
  soreted-set fn and sorted-map fn
- Most clojure sequences are lazy. They generate elements only when
  they are actually needed.
- List comprehensio generalized to sequence comprehension.
  #+BEGIN_SRC clojure
    (for [binding-from coll-expr filter-expr? ..] expr)
    ;; working with more than one binding-from
    (for [file "ABDCDE"
          num "12345"]
      (format "%c%c" file num))
    ;; ("A1" "A2" "A3" "A4" "A5" "B1" "B2" "B3" "B4" "B5" "D1" "D2" "D3" "D4" "D5" "C1" "C2" "C3" "C4" "C5" "D1" "D2" "D3" "D4" "D5" "E1" "E2" "E3" "E4" "E5")
  #+END_SRC
- Being LAZY
  - Work with huge dataset that don't fit into memory
  - Delay I/O until it's absolutely needed

- Making Java Seqable
  #+BEGIN_SRC clojure
    ;; String .getBytes returns a byte array
    (.getBytes "Hello")
    ;; #object["[B" 0x41d79e6a "[B@41d79e6a"]
    ;; using Sequeance library functions on ByteArray
    (first (.getBytes "hello"))
    ;; 104
    (cons (int \h) (.getBytes "ello"))
    ;; (104 101 108 108 111)
    (type (System/getProperties))
    (first (System/getProperties))
    ;; Strings are sequence of character, they also are seqable

    ;; Regular expressions
    ;; re-sequenc
    (re-seq #"\w+" "The quick brown fox")
    ;; ("The" "quick" "brown" "fox")
#+END_SRC

- *SEQing the file system*
  - You can seq over file system
    #+BEGIN_SRC clojure
      (import 'java.io.File)
      (.listFiles (File. ".")) ;; this represent an array of files
      ;; we can seq it
      (seq (.listFiles (File. ".")))
      (def my-files (seq (.listFiles (File. "."))))
      ;; (#object[java.io.File 0x3e87809 "./project.clj"] #object[java.io.File 0x573f802d "./.DS_Store"] #object[java.io.File 0x2fc7c82 "./LICENSE"] #object[java.io.File 0x1f74a82f "./test"] #object[java.io.File 0x5f1cb3f8 "./CHANGELOG.md"] #object[java.io.File 0x74096ede "./target"] #object[java.io.File 0x15f014b1 "./.hgignore"] #object[java.io.File 0x2f7fe3f0 "./resources"] #object[java.io.File 0x15461694 "./.nrepl-port"] #object[java.io.File 0x2a06e57c "./README.md"] #object[java.io.File 0x3f463911 "./.lein-repl-history"] #object[java.io.File 0x6ff62d6a "./.gitignore"] #object[java.io.File 0x4aa164b6 "./doc"] #object[java.io.File 0x5711559b "./.git"] #object[java.io.File 0x591160d9 "./src"])
      ;; Lets get the name of the files
      (map #(.getName %) my-files)
      ;; ("project.clj" ".DS_Store" "LICENSE" "test" "CHANGELOG.md" "target" ".hgignore" "resources" ".nrepl-port" "README.md" ".lein-repl-history" ".gitignore" "doc" ".git" "src")
      ;; you don't have to call seq on .listFiles here btw.

      ;; Recursively travel through the entire directory tree.
      ;; depth-first walk, file-seqable
      (count (file-seq (File. ".")))
      ;; 287
      ;; Now, lets see only the files that have been changed recently
      ;; lets give 30 minutes interval
      (defn minutes->milliseconds
        "Returns milliseconds of given minute"
        [mins]
        (* mins 60 1000))

      (defn recent?
        "Returns boolean by checking if the given time is less than 30
        minutes from current time"
        [time]
        (> time
         (- (System/currentTimeMillis) (minutes->milliseconds 30))))

      (defn recently-modified?
        "Given a file, check if it is recently modified. Return boolean"
        [file]
        (recent? (.lastModified file)))

      ;; Now, the code which filters only last modified files
      (map #(.getName %) (filterv recently-modified? (file-seq (File. "."))))
      ;; (".git" "objects" "c9" "d80994c11191f1d1264ac8e7204f91813cebf3" "e4" "2ad6d221c7249614359bcf23e5281e86fdd8c3" "87" "5a69cd9d466c17d379356c74bdba29bcbb2688" "15" "b8e30c5538dfb37ccd7506edbd074f12854697" "7f" "332eef5e18695de478d337616b3dbbe29478d7" "HEAD" "main" "main" "heads" "main" "origin" "main" "index" "COMMIT_EDITMSG" "programming_clojure" "notes.org")
    #+END_SRC
